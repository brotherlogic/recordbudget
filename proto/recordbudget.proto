syntax = "proto3";

package recordbudget;

option go_package = "github.com/brotherlogic/recordbudget/proto";

message Config {
  int64 last_recordcollection_pull = 1;
  repeated BoughtRecord purchases = 2;
  repeated PreBoughtRecord pre_purchases = 3;
  repeated SoldRecord solds = 4;

  int32 last_order_pull = 6;
  int32 rotate_order_pull = 10;
  repeated Order orders = 5;
  int64 last_order_pull_date = 7;

  repeated Budget budgets = 8;
  int32 tracking = 9;
}

  enum BudgetType {
    YEARLY = 0;
    QUARTERLY = 2;
    INFINITE = 3;
  }

message Budget {
  string name = 1;

  BudgetType type = 2;

  map<int64, int32> seeds = 3;
  map<int32, int32> spends = 4;

  int32 remaining = 5;
  bool sale_fed = 6;
  int32 solds = 7;

  int64 start = 8;
  int64 end = 9;
}


message Order {
  string order_id = 1;
   int64 listing_id = 2;
  int64 sale_date = 3;
  int32 sale_price = 4;
  bool cancelled = 5;
  
}

message BoughtRecord {
  int32 instance_id = 1;
  int32 cost = 2;
  int64 bought_date = 3;
  string budget = 4;
}

message PreBoughtRecord {
  int32 id = 1;
  int32 cost = 2;
}

message SoldRecord {
  int32 instance_id = 1;
  int32 price = 2;
  int64 sold_date = 3;
  bool was_parents = 4;
}

message GetBudgetRequest {
  int32 year = 1;
  string budget = 2;
}

message Records {
  repeated BoughtRecord records = 1;
}

message GetBudgetResponse {
  int32 spends = 1;
  int32 pre_spends = 5;
  int32 solds = 6;
  int32 budget = 2;
  repeated int32 purchased_ids = 3;
  repeated int32 pre_purchased_ids = 4;

  map<string, Records> budget_state = 7;

  Budget chosen_budget = 8;
}

message GetSoldRequest{
  int32 instance_id = 1;
}

message GetSoldResponse {
  SoldRecord record = 1;
}

message AddBudgetRequest {
  string name = 1;
  BudgetType type = 2;
  bool sale_fed = 3;
  int64 start = 4;
  int64 end = 5;
}

message AddBudgetResponse {}

message SeedBudgetRequest {
  string name = 1;
  int64 timestamp = 2;
  int32 amount = 3;
}

message SeedBudgetResponse {

}

service RecordBudgetService {
  rpc AddBudget(AddBudgetRequest) returns (AddBudgetResponse) {};
  rpc SeedBudget(SeedBudgetRequest) returns (SeedBudgetResponse) {};
  rpc GetBudget(GetBudgetRequest) returns (GetBudgetResponse) {};
  rpc GetSold(GetSoldRequest) returns (GetSoldResponse) {};
}