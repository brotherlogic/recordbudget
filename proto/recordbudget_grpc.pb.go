// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RecordBudgetServiceClient is the client API for RecordBudgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordBudgetServiceClient interface {
	GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error)
}

type recordBudgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordBudgetServiceClient(cc grpc.ClientConnInterface) RecordBudgetServiceClient {
	return &recordBudgetServiceClient{cc}
}

func (c *recordBudgetServiceClient) GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error) {
	out := new(GetBudgetResponse)
	err := c.cc.Invoke(ctx, "/recordbudget.RecordBudgetService/GetBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordBudgetServiceServer is the server API for RecordBudgetService service.
// All implementations should embed UnimplementedRecordBudgetServiceServer
// for forward compatibility
type RecordBudgetServiceServer interface {
	GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error)
}

// UnimplementedRecordBudgetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordBudgetServiceServer struct {
}

func (UnimplementedRecordBudgetServiceServer) GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudget not implemented")
}

// UnsafeRecordBudgetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordBudgetServiceServer will
// result in compilation errors.
type UnsafeRecordBudgetServiceServer interface {
	mustEmbedUnimplementedRecordBudgetServiceServer()
}

func RegisterRecordBudgetServiceServer(s grpc.ServiceRegistrar, srv RecordBudgetServiceServer) {
	s.RegisterService(&_RecordBudgetService_serviceDesc, srv)
}

func _RecordBudgetService_GetBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordBudgetServiceServer).GetBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordbudget.RecordBudgetService/GetBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordBudgetServiceServer).GetBudget(ctx, req.(*GetBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordBudgetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordbudget.RecordBudgetService",
	HandlerType: (*RecordBudgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBudget",
			Handler:    _RecordBudgetService_GetBudget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordbudget.proto",
}
