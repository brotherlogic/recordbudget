// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: recordbudget.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordBudgetServiceClient is the client API for RecordBudgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordBudgetServiceClient interface {
	AddBudget(ctx context.Context, in *AddBudgetRequest, opts ...grpc.CallOption) (*AddBudgetResponse, error)
	SeedBudget(ctx context.Context, in *SeedBudgetRequest, opts ...grpc.CallOption) (*SeedBudgetResponse, error)
	GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error)
	GetSold(ctx context.Context, in *GetSoldRequest, opts ...grpc.CallOption) (*GetSoldResponse, error)
}

type recordBudgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordBudgetServiceClient(cc grpc.ClientConnInterface) RecordBudgetServiceClient {
	return &recordBudgetServiceClient{cc}
}

func (c *recordBudgetServiceClient) AddBudget(ctx context.Context, in *AddBudgetRequest, opts ...grpc.CallOption) (*AddBudgetResponse, error) {
	out := new(AddBudgetResponse)
	err := c.cc.Invoke(ctx, "/recordbudget.RecordBudgetService/AddBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordBudgetServiceClient) SeedBudget(ctx context.Context, in *SeedBudgetRequest, opts ...grpc.CallOption) (*SeedBudgetResponse, error) {
	out := new(SeedBudgetResponse)
	err := c.cc.Invoke(ctx, "/recordbudget.RecordBudgetService/SeedBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordBudgetServiceClient) GetBudget(ctx context.Context, in *GetBudgetRequest, opts ...grpc.CallOption) (*GetBudgetResponse, error) {
	out := new(GetBudgetResponse)
	err := c.cc.Invoke(ctx, "/recordbudget.RecordBudgetService/GetBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordBudgetServiceClient) GetSold(ctx context.Context, in *GetSoldRequest, opts ...grpc.CallOption) (*GetSoldResponse, error) {
	out := new(GetSoldResponse)
	err := c.cc.Invoke(ctx, "/recordbudget.RecordBudgetService/GetSold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordBudgetServiceServer is the server API for RecordBudgetService service.
// All implementations should embed UnimplementedRecordBudgetServiceServer
// for forward compatibility
type RecordBudgetServiceServer interface {
	AddBudget(context.Context, *AddBudgetRequest) (*AddBudgetResponse, error)
	SeedBudget(context.Context, *SeedBudgetRequest) (*SeedBudgetResponse, error)
	GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error)
	GetSold(context.Context, *GetSoldRequest) (*GetSoldResponse, error)
}

// UnimplementedRecordBudgetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordBudgetServiceServer struct {
}

func (UnimplementedRecordBudgetServiceServer) AddBudget(context.Context, *AddBudgetRequest) (*AddBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBudget not implemented")
}
func (UnimplementedRecordBudgetServiceServer) SeedBudget(context.Context, *SeedBudgetRequest) (*SeedBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedBudget not implemented")
}
func (UnimplementedRecordBudgetServiceServer) GetBudget(context.Context, *GetBudgetRequest) (*GetBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudget not implemented")
}
func (UnimplementedRecordBudgetServiceServer) GetSold(context.Context, *GetSoldRequest) (*GetSoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSold not implemented")
}

// UnsafeRecordBudgetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordBudgetServiceServer will
// result in compilation errors.
type UnsafeRecordBudgetServiceServer interface {
	mustEmbedUnimplementedRecordBudgetServiceServer()
}

func RegisterRecordBudgetServiceServer(s grpc.ServiceRegistrar, srv RecordBudgetServiceServer) {
	s.RegisterService(&RecordBudgetService_ServiceDesc, srv)
}

func _RecordBudgetService_AddBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordBudgetServiceServer).AddBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordbudget.RecordBudgetService/AddBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordBudgetServiceServer).AddBudget(ctx, req.(*AddBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordBudgetService_SeedBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordBudgetServiceServer).SeedBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordbudget.RecordBudgetService/SeedBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordBudgetServiceServer).SeedBudget(ctx, req.(*SeedBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordBudgetService_GetBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordBudgetServiceServer).GetBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordbudget.RecordBudgetService/GetBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordBudgetServiceServer).GetBudget(ctx, req.(*GetBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordBudgetService_GetSold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordBudgetServiceServer).GetSold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordbudget.RecordBudgetService/GetSold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordBudgetServiceServer).GetSold(ctx, req.(*GetSoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordBudgetService_ServiceDesc is the grpc.ServiceDesc for RecordBudgetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordBudgetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recordbudget.RecordBudgetService",
	HandlerType: (*RecordBudgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBudget",
			Handler:    _RecordBudgetService_AddBudget_Handler,
		},
		{
			MethodName: "SeedBudget",
			Handler:    _RecordBudgetService_SeedBudget_Handler,
		},
		{
			MethodName: "GetBudget",
			Handler:    _RecordBudgetService_GetBudget_Handler,
		},
		{
			MethodName: "GetSold",
			Handler:    _RecordBudgetService_GetSold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordbudget.proto",
}
